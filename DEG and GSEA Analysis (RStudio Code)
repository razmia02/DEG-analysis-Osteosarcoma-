###Ballgown for DEGs analysis between primary and metastatic tumour in osteosarcoma patients####

##Setting working directory###
getwd()
setwd("D:/Bioinformatics Projects/Osteosarcoma/NGS Analysis/primary_metastatic")

##Installing packages and libraries##
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install("ballgown")
BiocManager::install("EnhancedVolcano")
BiocManager::install("devtools")


library(ballgown)
library(genefilter)
library(plyr)
library(devtools)


##setting the directories
setwd("D:/Bioinformatics Projects/Osteosarcoma/NGS Analysis/primary_metastatic")
dwe <- "D:/Bioinformatics Projects/Osteosarcoma/NGS Analysis/primary_metastatic"
##reading the phenodata
pheno_data = read.csv(file ="phenotype.csv", header = TRUE, sep = ",")

# Here The file of phenoype will be read into the object of "pheno"
pheno = read.csv("phenotype.csv")
pheno

colnames(pheno)[1] = "Sample"

#pheno file is sorted in an ascending
sort1.pheno <- pheno[order(pheno$Sample) , ]
order(pheno$Sample)
pheno

bg = ballgown(dataDir= getwd(), samplePattern="GSM",
              meas="all", pData=sort1.pheno)
bg
#########################
# saving the object of bg as .rda
save(bg, file="bg.rda")
structure(bg)$exon
structure(bg)$intron
bg

#genomesubset only pick specific part of genome
#subset subset only specific samples of genomic locations
#texpr (extract transcript-level expressions from bg objects)
#rowVars calculated variance of each row

bg_filt = subset(bg,"rowVars(texpr(bg)) > 1",genomesubset=TRUE)
bg_table = texpr(bg_filt, "all")

#takes unique values(all rows) from column 9 and 10 which gene id and gene name
bg_gene_names = unique(bg_table[, 9:10])

#stores transcript expression level extracted from filtered bg and store that as a data frame
transcript_expression = as.data.frame(texpr(bg_filt))
head(transcript_expression)
row.names(transcript_expression)


#test transcript for DE using linear model
#means:expression measurement to use for statistical tests
results_transcripts = stattest(bg_filt, feature="transcript",
                               covariate="Phenotype",adjustvars = NULL,
                               getFC=TRUE, meas="FPKM")
results_genes = stattest(bg_filt, feature="gene",
                         covariate="Phenotype", adjustvars = NULL, getFC=TRUE, meas="FPKM")
save.image(".RData")
#######storing the files ##############
write.csv(bg_gene_names, "Gene Names (All).csv")
write.csv(bg_table, "Complete Info.csv")
write.csv(results_genes, "Genes (All).csv")
write.csv(results_transcripts, "Transcripts (All).csv")

###transcripts analysis###########
results_transcriptsmer =
  data.frame(geneNames=ballgown::geneNames(bg_filt),

geneIDs=ballgown::geneIDs(bg_filt),
transcriptNames=ballgown::transcriptNames(bg_filt), results_transcripts) 
##The above code will create a dataframe containing gene names, geneids, transcript names and information related to transcripts##


#arrange result_transcripts on the basis of p value
results_transcripts = arrange(results_transcripts,pval)
results_genes = arrange(results_genes,pval)
write.csv(results_transcripts, "Trancripts_all_Arranged (pval).csv",
          row.names=FALSE)
write.csv(results_genes, "Genes_all_Arranged (pval).csv",
          row.names=FALSE)

#subset of result transcripts where pvalue is less than 0.05
tra <- subset(results_transcripts,results_transcripts$pval<0.05)
gen <- subset(results_genes,results_genes$pval<0.05)
write.csv(tra, "Transcripts_filtered.csv")
write.csv(gen, "Genes_filtered.csv")

####Box plot####
tropical= c("darkorange", "dodgerblue",
             "hotpink", "limegreen", "yellow")
palette(tropical)
#extract transcript-level expression measurements from ballgown objects
fpkm = texpr(bg_filt,meas="FPKM")

fpkm = log2(fpkm+1)
boxplot(fpkm, col=as.numeric(pheno$phenotype),las=2,ylab="log2(FPKM+1)")

transcript_gene_table = indexes(bg_filt)$t2g
head(transcript_gene_table)
#Each row of data represents a transcript.
length(row.names(transcript_gene_table))
length(unique(transcript_gene_table[,"g_id"]))

counts=table(transcript_gene_table[,"g_id"])
c_one = length(which(counts == 1))
c_more_than_one = length(which(counts > 1))
c_max = max(counts)
hist(counts, breaks=50, col="bisque4", xlab="Transcripts per gene",
     main="Distribution of transcript count per gene")
legend_text = c(paste("Genes with one transcript =", c_one),
                paste("Genes with more than one transcript =", c_more_than_one),
                paste("Max transcripts for single gene = ", c_max))
legend("topright", legend_text, lty=NULL)
#Plot #2 - the distribution of transcript sizes as a histogram
full_table <- texpr(bg_filt , "all")
hist(full_table$length, breaks=50, xlab="Transcript length (bp)", main="Distribution of transcript lengths", col="steelblue")




########################################################
data_colors=(c("white", "blue", "#007FFF", "cyan","#7FFF7F", "yellow",
               "#FF7F00", "red", "#7F0000", "white", "blue", "#007FFF",
               "cyan","#7FFF7F", "yellow", "#FF7F00", "red",
               "#7F0000", "yellow", "#FF7F00", "red", "#7F0000", "aquamarine", "orange", "chartreuse", "#009999", "#0000FF"))
min_nonzero=1
#Set the columns for finding FPKM and create shorter names for figures
data_columns=c(1:16)
short_names=c("S1","S2","S3","S4","S5","S6","S7","S8","S9","S10", "S11", "S12", "S13", "S14", "S15", "S16")
boxplot(log2(transcript_expression[,data_columns]+min_nonzero),
        col=data_colors, names=short_names, las=2, ylab="log2(FPKM)",
        main="Distribution of FPKMs ")


#########################################
sig=which(results_transcriptsmer$pval<0.05)
results_transcriptsmer[,"de"] = log2(results_transcriptsmer[,"fc"])

write.csv(results_transcriptsmer,"file de.csv")

hist(results_transcriptsmer[sig,"de"],
     breaks=50, col="seagreen", xlab="log2(Fold change Primary-Metastatic)",
     main="Distribution of differential expression values")
abline(v=-2, col="black", lwd=2, lty=2)
abline(v=2, col="black", lwd=2, lty=2)
legend("topright", "Fold-change > 2", lwd=2, lty=2)
####### enhanced volcano############
BiocManager::install("EnhancedVolcano")
library(EnhancedVolcano)
EnhancedVolcano(results_transcriptsmer,
                lab = results_transcriptsmer$geneNames,
                x = "de",
                y = "pval",
                pCutoff = 0.05,
                FCcutoff = 0.5,
                title = "DEGs")

trans <- subset(results_transcriptsmer, pval < 0.05)
trans <- subset(results_transcriptsmer, fc < -0.5 | fc > 0.5)

trans <- subset(trans, de < -0.5 | de > 0.5)
write.csv(trans,"Final Differentially Expressed Transcripts (After Cutoffs).csv")
up <- subset(trans, de > 0.5)
down <- subset(trans, de < -0.5)
write.csv(up, "Significant Upregulated genes.csv")
write.csv(down, "Significantly Downregulated genes.csv")

#####Number of Transcripts for entire dataset#####
length(row.names(trans))
length(unique(trans[,"geneNames"]))

genes_unique = table(trans[,"geneNames"])
genes_c_one = length(which(genes_unique == 1))
genes_c_more_than_one = length(which(genes_unique > 1))
genes_c_max = max(genes_unique)
hist(genes_unique, breaks=50, col="bisque4", xlab="Transcripts per gene",
     main="Distribution of transcript count per gene")
legend_text = c(paste("Genes with one transcript =", genes_c_one),
                paste("Genes with more than one transcript =", genes_c_more_than_one),
                paste("Max transcripts for single gene = ", genes_c_max))
legend("topright", legend_text, lty=NULL)


######Finding the DEGs having more than one transcript######
# Use table() to count the number of transcripts per gene
gene_counts <- table(trans$geneNames)

# Filter for genes with counts greater than one
genes_more_than_one_transcript <- names(gene_counts[gene_counts > 1])

# Create a dataset containing genes with more than one transcript
genes_dataset_more_than_one_transcript <- trans[trans$geneNames %in% genes_more_than_one_transcript, ]


write.csv(genes_dataset_more_than_one_transcript,"genes_dataset_more_than_one_transcript.csv")


###Finding the number of transcripts in Up DEGs###
genes_unique_up = table(up[,"geneNames"])
genes_c_one_up = length(which(genes_unique_up == 1))
genes_c_more_than_one_up = length(which(genes_unique_up > 1))
genes_c_max_up = max(genes_unique_up)
hist(genes_unique_up, breaks=50, col="bisque4", xlab="Transcripts per gene",
     main="Distribution of transcript count per gene")
legend_text = c(paste("Genes with one transcript =", genes_c_one_up),
                paste("Genes with more than one transcript =", genes_c_more_than_one_up),
                paste("Max transcripts for single gene = ", genes_c_max_up))
legend("topright", legend_text, lty=NULL)


###Finding the number of transcripts in Down DEGS#####
genes_unique_down = table(down[,"geneNames"])
genes_c_one_down = length(which(genes_unique_down == 1))
genes_c_more_than_one_down = length(which(genes_unique_down > 1))
genes_c_max_down = max(genes_unique_down)
hist(genes_unique_down, breaks=50, col="bisque4", xlab="Transcripts per gene",
     main="Distribution of transcript count per gene")
legend_text = c(paste("Genes with one transcript =", genes_c_one_down),
                paste("Genes with more than one transcript =", genes_c_more_than_one_down),
                paste("Max transcripts for single gene = ", genes_c_max_down))
legend("topright", legend_text, lty=NULL)






####Gene Set Enrichment Analysis#####
BiocManager::install("clusterProfiler", version = "3.17")
BiocManager::install("pathview")
BiocManager::install("enrichplot")
library(clusterProfiler)
library(enrichplot)
# we use ggplot2 to add x axis labels (ex: ridgeplot)
library(ggplot2)

# SET THE DESIRED ORGANISM HERE
organism = "org.Hs.eg.db"
BiocManager::install(organism, character.only = TRUE)
library(organism, character.only = TRUE)

res = read.csv("Final Differentially Expressed Transcripts (After Cutoffs).csv")
head(res)


# we want the log2 fold change 
original_gene_list = res$fc

# name the vector
names(original_gene_list) <- res$geneNames
original_gene_list
# omit any NA values 
gene_list<-na.omit(original_gene_list)
original_gene_list
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)

gse <- gseGO(geneList=gene_list, 
             ont ="ALL", 
             keyType = "SYMBOL",
             minGSSize = 3, 
             maxGSSize = 800, 
             pvalueCutoff = 0.05, 
             verbose = TRUE, 
             OrgDb = org.Hs.eg.db, 
             pAdjustMethod = "none")
require(DOSE)
dotplot(gse, showCategory=3, split=".sign") + facet_grid(.~.sign)

x2 = pairwise_termsim(gse)
emapplot(x2, showCategory = 20)

emapplot(x2, showCategory = 10)
cnetplot(gse, categorySize="pvalue", foldChange=gene_list, showCategory = 3)
ridgeplot(x2) + labs(x = "enrichment distribution")



#####Kegg Pathway Enrichment Analysis###
# Convert gene IDs for gseKEGG function
# We will lose some genes here because not all IDs will be converted
ids = bitr(names(original_gene_list), fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)

# remove duplicate IDS (here we use "SYMBOL", but it should be whatever was selected as keyType)
dedup_ids = ids[!duplicated(ids[c("SYMBOL")]),]

# Create a new dataframe df2 which has the respective entrez IDs for the gene symbols.
colnames(dedup_ids) = c("geneNames", "EntrezID")
df2 = merge(res, dedup_ids, by = "geneNames")

# Create a vector of the gene universe
kegg_gene_list = df2$fc

# Name vector with ENTREZ ids
names(kegg_gene_list) = df2$EntrezID

# omit any NA values 
kegg_gene_list = na.omit(kegg_gene_list)

# sort the list in decreasing order (required for clusterProfiler)
kegg_gene_list = sort(kegg_gene_list, decreasing = TRUE)

kegg_organism = "hsa"
kk2 = gseKEGG(geneList = kegg_gene_list,
              organism = kegg_organism,
              minGSSize  = 3,
              maxGSSize  = 800,
              pvalueCutoff = 0.05,
              pAdjustMethod = "none",
              keyType       = "ncbi-geneid")

dotplot(kk2, showCategory = 10, title = "Enriched Pathways" , split=".sign") + facet_grid(.~.sign)
out = as.matrix(kk2@result)
out = out[, 1:10]
head(out)

write.csv(out, "Enriched Kegg Pathways.csv")
gseaplot(kk2, by = "all", title = kk2$Description[10], geneSetID = 3)
kk2$Description
